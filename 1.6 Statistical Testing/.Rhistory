4(5)
5(4)
print('hi everyone')
print('hi everyone')
print('hi everyone')
?str()
library(dplyr)
help(str)
help(rnorm)
print('hello world')
help("print")
install.packages('dplyr')
print(1:100)
1+a
a - b
1 + '1'
1+1
1+'1'
print(
print(
help(dplyr)
?dplyr
help(mutate)
library(dplyr)
help("mutate")
install.packages('dplyr')
install.packages("dplyr")
numbers = c(10, 7, -4, 8)
mean(numbers)
x = 10
class(x)
typeof(x)
> a = TRUE
> typeof(a)
[1] "logical"
> b = FALSE
> typeof(b)
[1] "logical"
a = TRUE
class(a)
x = 10<5
x
class(x)
is.numeric(x)
p = 'hello world'
p
class(p)
x=4
y='4'
x+y
4 + '4'
as.numeric(y)
x+as.numeric(y)
vec = c(1:10)
length(vec)
coin = c('h', 't')
sample(coin, 10)
sample(coin, 10, replace = T)
x=sample(coin, 10, replace = T)
count.fields(x)
str(x)
x[x == 't']
len(x[x == 't'])
length(x[x == 't'])
coin = c('h', 't')
flips=sample(coin, 10, replace = F)
flips=sample(coin, 10, replace = T)
flips
length(flips[flips == 'h']
length(flips[flips == 'h'])
coin = c('h', 't')
flips=sample(coin, 10, replace = T)
flips
length(flips[flips == 'h'])
unique(flips)
table(flips)
table(flips)
vector_of_numbers = c('a', 'b', 'c', 'd')
# the unique function allows us to
# the unique function allows us to check the unique values
unique(vector_of_numbers)
# or table to count values in the vector
table(vector_of_numbers)
exam_score <- data.frame("student" = c(1, 2, 3, 4, 5),
"sex" = c("m", "m", "m", "f", "f"),
"exam_score" = c(73, 57, 93, 93, 73))
exam_score
str(exam_score)
=titanic=data("Titanic")
titanic=data("Titanic")
data("Titanic")
titanic=data.frame(data("Titanic"))
View(titanic)
m=table(exam_score)
m[1]
vec = c(1,2,3,4,5,6,6)
cev
vec
vec_2 = c(12,3,5,4,2,1)
vec_2 = c(12,3,5,4,2,1,2)
x=cbind(vec, vec_2)
x
class(x
class(x)
vec_2 = c(12,3,5,4,2,1)
x=cbind(vec, vec_2)
l1=list(1)
# Create a list with vectors of different lengths
random_list <- list(
"l1" = c('hello', 'world'),
"l2" = c('hello', 'world', 1, 2, 4), #
"l3" = rnorm(n= 35),
"l4" = 'this is a random list')
random_list[1]
random_list$l2
random_list[[l3]]
random_list[[3]]
# Create a list with vectors of different lengths
random_list <- list(
"l1" = c('hello', 'world'),
"l2" = c('hello', 'world', 1, 2, 4), #
"l3" = rnorm(n= 35),
"l4" = 'this is a random list')
random_list[1]
random_list$l2
random_list[[3]]
random_list
str(random_list)
random_list[2]
random_list$l3
random_list[[4]]
exam_score <- data.frame("student" = c(1, 2, 3, 4, 5),
"sex" = c("m", "m", "m", "f", "f"),
"exam_score" = c(73, 57, 93, 93, 73))
exam_scores_males =  exam_score[exam_score$sex == "M", ]
exam_scores_males =  exam_score[exam_score$sex == "M", ]
exam_scores_80 =  exam_score[exam_score$exam_score > 80, ]
exam_scores_males =  exam_score[exam_score$sex == "M", ]
exam_scores_more_80 =  exam_score[exam_score$exam_score > 80, ]
exam_scores_males_less_60 =  exam_score[exam_score$sex == "M" & exam_score$exam_score > 80, ]
a = c(1, 1, 5)
b = c(1, 8, 3)
a+b
a=c(10, 20, 30)
a+10
a/10
10*2
10**2
my_birthday_digits = c(1,8,0,9,1,9,9,2)
res = mean(my_birthday_digits)
res = my_birthday_digits * mean(my_birthday_digits)
my_birthday_digits_mult = my_birthday_digits * mean(my_birthday_digits)
my_birthday_digits_mult %%2
my_birthday_digits_mult_mod = my_birthday_digits_mult %% 2
result = my_birthday_digits_mult_mod[2]
my_birthday_digits = c(1,8,0,9,1,9,9,2)
my_birthday_digits_mult = my_birthday_digits * mean(my_birthday_digits)
my_birthday_digits_mult_mod = my_birthday_digits_mult %% 2
result = my_birthday_digits_mult_mod[2]
print(result)
a = c(5,7,2,9)
ifelse(a %% 2 == 0,"even","odd")
ages = c(10, 20, 30, 40, 50)
ages = c(10, 20, 30, 40, 50, 60, 70, 80)
ages = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
data.frame(ages = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
classification = NA)
age_df=data.frame(ages = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
classification = NA)
age_df=data.frame(ages = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
age_df=data.frame(ages = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
age_df$classification = ifelse(age_df$ages > 50,"less young","young")
View(age_df)
vec<- runif(100,100,150)  # this is our original vector, which I'm just making up
vec<- runif(100,100,150)  # this is our original vector, which I'm just making up
corrupt <- as.logical(rbinom(length(vec),1,0.1))    # choose an average of 10% to corrupt at random
add_noise <- as.logical(rbinom(length(vec),1,0.5))    # choose an average of 10% to corrupt at random
?runif
noise <- runif(sum(add_noise), 10, 20) # generate the noise to add
vec[add_noise] <- vec[add_noise] + noise
vec1<- runif(100,100,150)
vec<- runif(100,100,150)
vec1=vec
add_noise <- as.logical(rbinom(length(vec),1,0.5))
noise <- runif(sum(add_noise), 10, 20)
vec[add_noise] <- vec[add_noise] + noise
df=data.frame(orig = vec1, noise = vec)
View(df)
vec<- runif(100,100,150)
vec1=vec
add_noise <- as.logical(rbinom(length(vec),1,0.5))
noise <- runif(sum(add_noise), -20, 20)
vec[add_noise] <- vec[add_noise] + noise
df=data.frame(orig = vec1, noise = vec)
View(df)
?t.test
getwd()
setwd("~/Google Drive/R Seminar (PR)/Introduction-to-R/1.6 Statistical Testing")
sugar=read.csv('sugar.csv')
sugar$X1961
View(sugar)
View(sugar)
mean(sugar$X1961)
mean(sugar$X1961, na.rm = T)
mean(sugar$X2013, na.rm = T)
# lets run a one sample t- test on the year of 1961, is the mean different from 75g/day?
sugar_t <- t.test(x = sugar$X1961,
mu = 9.5)  # H0 = mean = 75gday
sugar_t
# lets run a one sample t- test on the year of 1961, is the mean different from 75g/day?
sugar_t <- t.test(x = sugar$X1961,
mu = 75)  # H0 = mean = 75gday
sugar_t
hist(sugar$X1961)
str(sugar)
sugar=read.csv('sugar.csv')
# lets run a one sample t- test on the year of 1961, is the mean different from 75g/day?
sugar_t <- t.test(x = sugar$X1961,
mu = 75)  # H0 = mean = 75gday
sugar_t
hist(sugar$X1961)
str(sugar_t)
class(sugar_t)
t.test(X1961, X2013, data = sugar)
t.test(sugar$X1961, sugar$X2013)
sugar_t_two=t.test(sugar$X1961, sugar$X2013)
sugar_t_two
